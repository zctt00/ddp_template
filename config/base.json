{
    "name": "base", // experiments name
    "gpu_ids": [0], // gpu ids list, default is single 0
    "seed" : 2021, // random seed, seed <0 represents randomization not used 
    "finetune_norm": false, // find the parameters to optimize

    "path": { //set every part file path
        "base_dir": "experiments", // base path for all log except resume_state
        "tb_logger": "tb_logger", // path of tensorboard logger
        "results": "results",
        "code": "code", // code backup
        "checkpoint": "checkpoint",
        // "resume_state": "experiments/debug_base_220226_214326/checkpoint/100" 
        "resume_state": null // ex: 100, loading .state  and .pth from given epoch and iteration
    },

    "datasets": { // train or test
        "train": { 
            "which_dataset": {  // import designated dataset using arguments 
                "name": ["data.dataset", "Dataset"], // import Dataset() class / function(not recommend) from data.dataset.py (default is [data.dataset.py])
                "args":{ // arguments to initialize dataset
                    // "data_root": "/home/huangyecheng/dataset/cmfd/comofod"
                    "data_root": "/data/jlw/datasets/comofod"
                } 
            },
            "dataloader":{
                "validation_split": 0.1, // percent or number 
                "args":{ // arguments to initialize dataloader
                    "batch_size": 2, // batch size in each gpu
                    "num_workers": 4,
                    "shuffle": true,
                    "pin_memory": true,
                    "drop_last": true
                },
                "val_args":{ // arguments to initialize valid_dataloader, will overwrite the parameters in train_dataloader
                    "batch_size": 1, // batch size in each gpu
                    "num_workers": 4,
                    "shuffle": false,
                    "pin_memory": true,
                    "drop_last": false
                }
            }
        },
        "test": { 
            "which_dataset": {
                "name": "Dataset", // import Dataset() class / function(not recommend) from default file
                "args":{
                    "data_root": "/data/jlw/datasets/comofod",
                    "phase": "test"
                }
            },
            "dataloader":{
                "args":{
                    "batch_size": 1,
                    "num_workers": 4,
                    "pin_memory": true
                }
            }
        }
    },

    "model": { // networks/metrics/losses/optimizers/lr_schedulers is a list and model is a dict
        "which_model": { // import designated  model(trainer) using arguments 
            "name": ["models.model", "Model"], // import Model() class / function(not recommend) from models.model.py (default is [models.model.py])
            "args": {
                // "ema_scheduler": { // not used now
                //     "ema_start": 1e3,
                //     "ema_iter": 1e3,
                //     "ema_decay": 0.9999
                // }
            }
        }, 
        "which_networks": [ // import designated list of networks using arguments
            {
                "name": "Network", // import Network() class / function(not recommend) from default file (default is [models/network.py]) 
                "args": { // arguments to initialize network
                    "init_type": "kaiming" // method can be [normal | xavier| xavier_uniform | kaiming | orthogonal], default is kaiming
                }
            }
        ],
        "which_optimizers": [ // len(networks) == len(optimizers) == len(lr_schedulers), it will be deleted after initialization if not used.
            { "name": "Adam", "args":{ "lr": 0.001, "weight_decay": 0}}
        ],
        "which_lr_schedulers": [
            {} // {} represents None, it will be deleted after initialization.
            // { "name": "StepLR", "args": { "step_size": 50, "gamma": 0.1 }}
        ],
        "which_losses": [ // import designated list of losses without arguments
            "mse_loss" // import mse_loss() function/class from default file (default is [models/losses.py]), equivalent to { "name": "mse_loss", "args":{}}
        ],
        "which_metrics": [ // import designated list of metrics without arguments
            "mae" // import mae() function/class from default file (default is [models/metrics.py]), equivalent to { "name": "mae", "args":{}}
        ]
    },

    "train": { // arguments for basic training
        "n_epoch": 500, // max epochs
        "n_iter": 1e6, // max interations, not limited now
        "val_epoch": 30, // valdation every specified number of epochs
        "save_checkpoint_epoch": 30,
        "log_iter": 1e4, // log every specified number of iterations
        "tensorboard" : true // tensorboardX enable
    },
    
    "debug": { // arguments in debug mode, which will replace arguments in train
        "val_epoch": 1,
        "save_checkpoint_epoch": 1,
        "log_iter": 30,
        "debug_split": 50 // percent or number, change the size of dataloder to debug_split.
    }
}
